// musicbox1.c
// for NerdKits with ATtiny26L
// mrobbins@mit.edu

// F_CPU defined for delay.c
#define F_CPU 8000000UL	// 8MHz

#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>
#include <util/delay.h>
#include <inttypes.h>
#include <stdlib.h>

#include "delay.h"

void play_tone(uint16_t delay, uint8_t duration) {
  // delay is half-period in microseconds
  // duration is in 10ms increments
  
  // example: 440Hz --> delay=1136
  
  // duration = 2*delay * cycles (all in same units)
  // cycles = 10000 * duration / delay / 2
  // cycles = 100 * duration / (delay/50)
  uint16_t tmp = 100 * duration;
  uint16_t delaysm = delay / 50;
  uint16_t cycles = tmp / delaysm;
  
  while(cycles > 0) {
    PORTB = 0xFF;
    _delay_us(delay);
    PORTB = 0x00;
    _delay_us(delay);
    cycles--;
  }
}

// define some notes
// Frequencies from http://www.phy.mtu.edu/~suits/notefreqs.html
// converted to half-periods (us) by calculating
// 	1000000/2/frequency
// where frequency is in Hz
#define D5 851
#define E5 758
#define Fsh5 675
#define G5 637
#define A5 568
#define B5 506
#define C6 477
#define D6 425
#define DUR 40

int main() {
  // internal RC oscillator calibration for 8MHz.
  OSCCAL = 176;

  // enable the piezo as output
  DDRB = 0xFF;

  // loop forever!
  while(1) {

	play_tone(D5, DUR);
	play_tone(E5, DUR);
	play_tone(D5, DUR);
	play_tone(G5, DUR);
	play_tone(Fsh5, 2*DUR);
	play_tone(D5, DUR);
	play_tone(E5, DUR);
	play_tone(D5, DUR);
	play_tone(A5, DUR);
	play_tone(G5, 2*DUR);
	play_tone(D5, DUR);
	play_tone(D6, DUR);
	play_tone(B5, DUR);
	play_tone(G5, DUR);
	play_tone(Fsh5, DUR);
	play_tone(E5, DUR);
	play_tone(C6, DUR);
	play_tone(B5, DUR);
	play_tone(G5, DUR);
	play_tone(A5, DUR);
	play_tone(G5, 2*DUR);
  
    // delay a bit
    _delay_ms(500);

  }

  return 0;

}
